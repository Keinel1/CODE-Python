# Импорт необходимых модулей
from django.db import models
from django.core.validators import RegexValidator, MinValueValidator
from django.core.mail import send_mail
from datetime import datetime, timedelta

# Модель заявки
class Request(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
    phone_regex = RegexValidator(regex=r'^\+?1?\d{9,15}$', message="Номер телефона должен быть в формате: '+999999999'. Допустимая длина от 9 до 15 цифр.")
    phone_number = models.CharField(validators=[phone_regex], max_length=17)
    event_date = models.DateField()
    event_time = models.TimeField()
    event_type = models.CharField(max_length=100)
    number_of_guests = models.PositiveIntegerField(validators=[MinValueValidator(1)])
    created_at = models.DateTimeField(auto_now_add=True)

    def str(self):
        return self.name

# Функция для проверки наличия свободных дат и времени для проведения мероприятия
def check_availability(event_date, event_time):
    requests = Request.objects.filter(event_date=event_date, event_time=event_time)
    if len(requests) == 0:
        return True
    else:
        return False

# Функция для генерации договора и счета на оплату
def generate_contract_and_invoice(request):
    # Генерация договора
    contract = f"Договор на организацию мероприятия\n\nКлиент: {request.name}\nДата мероприятия: {request.event_date}\nВремя мероприятия: {request.event_time}\nТип мероприятия: {request.event_type}\nКоличество гостей: {request.number_of_guests}\n\n"
    # Генерация счета на оплату
    invoice = f"Счет на оплату\n\nКлиент: {request.name}\nДата мероприятия: {request.event_date}\nВремя мероприятия: {request.event_time}\nТип мероприятия: {request.event_type}\nКоличество гостей: {request.number_of_guests}\nСумма: {request.number_of_guests * 1000} руб.\n\n"
    return contract, invoice

# Функция для отправки оповещения клиенту
def send_notification(request):
    subject = 'Заявка на организацию мероприятия'
    message = f'Уважаемый(ая) {request.name},\n\nВаша заявка на организацию мероприятия успешно зарегистрирована. В ближайшее время на указанный вами адрес электронной почты будет отправлен договор на организацию мероприятия и счет на оплату.\n\nС уважением,\nКоманда ООО "Эвент Сити Групп"'
    from_email = 'eventcitygroup@example.com'
    recipient_list = [request.email]
    send_mail(subject, message, from_email, recipient_list)

# Контроллер для обработки заявок
def process_request(request):
    if request.method == 'POST':
        # Получение данных из формы
        name = request.POST.get('name')
        email = request.POST.get('email')
        phone_number = request.POST.get('phone_number')
        event_date = request.POST.get('event_date')
        event_time = request.POST.get('event_time')
        event_type = request.POST.get('event_type')
        number_of_guests = request.POST.get('number_of_guests')

        # Создание объекта заявки
        request_obj = Request(name=name, email=email, phone_number=phone_number, event_date=event_date, event_time=event_time, event_type=event_type, number_of_guests=number_of_guests)
        request_obj.save()

        # Проверка наличия свободных дат и времени для проведения мероприятия
        event_datetime = datetime.combine(event_date, event_time)
        if check_availability(event_date, event_time):
            # Генерация договора и счета на оплату
            contract, invoice = generate_contract_and_invoice(request_obj)

            # Отправка договора и счета на оплату на указанный адрес электронной почты
            send_mail('Договор и счет на оплату', f'{contract}\n{invoice}', 'eventcitygroup@example.com', [email])

            # Отправка оповещения клиенту
            send_notification(request_obj)

            return HttpResponse('Заявка успешно зарегистрирована')
        else:
            return HttpResponse('На указанную дату и время уже забронировано мероприятие')
